{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings": {
        "src": "@openzeppelin/contracts/utils/ShortStrings.sol:40",
        "version": {
          "withMetadata": "cb602a8ff35cb957dd31a01066c8e85833901719156f2f057edd8fbe1cbc9264",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "9b295404c46f124a9bda5d4d3704e26e24ebc350b9847207b3860bbdfad76e39",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "d0a914dcbd6dc1df62bc3ee61691cd3d7f6f4578f47a60aa43e48b12480af25b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "9bfecca0cc7c673396fd735881b967b4e45a70584fa4de0f2ebd61321af7ad8a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "e5aecaf1fe0f587e2e9f017d33345da8ed323bdf1543c8e65f8cf5177ee95864",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "51c3e8ceb40f4dc49d3b24dedba37e26218a24dce6cab8fe1b7e4986a63bd7f6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/refund/RefundVaultEIP712.sol:RefundVaultEIP712": {
        "src": "contracts/refund/RefundVaultEIP712.sol:11",
        "version": {
          "withMetadata": "b1863e2dac6052ecba91d01a4b1fd691d508a8f908019de91541925b1aa982a4",
          "withoutMetadata": "f152b26f334bdd8fcb3a3f8cf2cc7c240731084d70dcc2c1e8a8150d98663909",
          "linkedWithoutMetadata": "f152b26f334bdd8fcb3a3f8cf2cc7c240731084d70dcc2c1e8a8150d98663909"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "(address,address)",
          "setSigner(address)",
          "pause()",
          "unpause()",
          "claim(address,uint256,uint256,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundVaultEIP712",
            "src": "contracts/refund/RefundVaultEIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "timelock",
            "src": "contracts/refund/RefundVaultEIP712.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "signer",
              "offset": 1,
              "slot": "3",
              "type": "t_address",
              "contract": "RefundVaultEIP712",
              "src": "contracts/refund/RefundVaultEIP712.sol:15"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RefundVaultEIP712",
              "src": "contracts/refund/RefundVaultEIP712.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    },
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:50",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC2981.sol:IERC2981": {
        "src": "@openzeppelin/contracts/interfaces/IERC2981.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC4906.sol:IERC4906": {
        "src": "@openzeppelin/contracts/interfaces/IERC4906.sol:10",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ba1f3d309de431e231fbe58a87c738ff27ed921b1d5cacc7ae7811e909f68bb2",
          "withoutMetadata": "c335b8543b0eebc7ea6a351e5debfad6770607f46ecaedc51d4a0f49351a2ae1",
          "linkedWithoutMetadata": "c335b8543b0eebc7ea6a351e5debfad6770607f46ecaedc51d4a0f49351a2ae1"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/interfaces/IERC4906.sol:IERC4906",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981": {
        "src": "@openzeppelin/contracts/token/common/ERC2981.sol:24",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/interfaces/IERC2981.sol:IERC2981",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_defaultRoyaltyInfo",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(RoyaltyInfo)1693_storage",
              "contract": "ERC2981",
              "src": "@openzeppelin/contracts/token/common/ERC2981.sol:30"
            },
            {
              "label": "_tokenRoyaltyInfo",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1693_storage)",
              "contract": "ERC2981",
              "src": "@openzeppelin/contracts/token/common/ERC2981.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)1693_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
              "numberOfBytes": "32"
            },
            "t_struct(RoyaltyInfo)1693_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "royaltyFraction",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "db7e8afee7d274f0f2696fed3ef1b2c5de3e9bdc76aa0e493d661ff76e8c6d59",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "d0a914dcbd6dc1df62bc3ee61691cd3d7f6f4578f47a60aa43e48b12480af25b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "e5aecaf1fe0f587e2e9f017d33345da8ed323bdf1543c8e65f8cf5177ee95864",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "51c3e8ceb40f4dc49d3b24dedba37e26218a24dce6cab8fe1b7e4986a63bd7f6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/nft/BaronNFT.sol:BaronNFT": {
        "src": "contracts/nft/BaronNFT.sol:10",
        "version": {
          "withMetadata": "35449c3e71f2f33858a54720d0c5344a51f4499aa385fb64e3f5be796fdb78f7",
          "withoutMetadata": "35449c3e71f2f33858a54720d0c5344a51f4499aa385fb64e3f5be796fdb78f7",
          "linkedWithoutMetadata": "35449c3e71f2f33858a54720d0c5344a51f4499aa385fb64e3f5be796fdb78f7"
        },
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/interfaces/IERC4906.sol:IERC4906",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/interfaces/IERC2981.sol:IERC2981",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(address,string)",
          "setBaseURI(string)",
          "freezeBaseURI()",
          "setDefaultRoyalty(address,uint96)",
          "freezeRoyalty()",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaronNFT",
            "src": "contracts/nft/BaronNFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:16"
            },
            {
              "label": "_defaultRoyaltyInfo",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(RoyaltyInfo)1693_storage",
              "contract": "ERC2981",
              "src": "@openzeppelin/contracts/token/common/ERC2981.sol:30"
            },
            {
              "label": "_tokenRoyaltyInfo",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1693_storage)",
              "contract": "ERC2981",
              "src": "@openzeppelin/contracts/token/common/ERC2981.sol:31"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "BaronNFT",
              "src": "contracts/nft/BaronNFT.sol:12"
            },
            {
              "label": "baseURIFrozen",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaronNFT",
              "src": "contracts/nft/BaronNFT.sol:14"
            },
            {
              "label": "_baseTokenURI",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "BaronNFT",
              "src": "contracts/nft/BaronNFT.sol:15"
            },
            {
              "label": "royaltyFrozen",
              "offset": 0,
              "slot": "13",
              "type": "t_bool",
              "contract": "BaronNFT",
              "src": "contracts/nft/BaronNFT.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)1693_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoyaltyInfo)1693_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "royaltyFraction",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    },
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:50",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC4906.sol:IERC4906": {
        "src": "@openzeppelin/contracts/interfaces/IERC4906.sol:10",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ba1f3d309de431e231fbe58a87c738ff27ed921b1d5cacc7ae7811e909f68bb2",
          "withoutMetadata": "c335b8543b0eebc7ea6a351e5debfad6770607f46ecaedc51d4a0f49351a2ae1",
          "linkedWithoutMetadata": "c335b8543b0eebc7ea6a351e5debfad6770607f46ecaedc51d4a0f49351a2ae1"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/interfaces/IERC4906.sol:IERC4906",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "db7e8afee7d274f0f2696fed3ef1b2c5de3e9bdc76aa0e493d661ff76e8c6d59",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "d0a914dcbd6dc1df62bc3ee61691cd3d7f6f4578f47a60aa43e48b12480af25b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "a5da818a19fbcc28337e4c935d185a2fe1b39f59db9f7d380937d0fa6fe54ce8",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "e5aecaf1fe0f587e2e9f017d33345da8ed323bdf1543c8e65f8cf5177ee95864",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "51c3e8ceb40f4dc49d3b24dedba37e26218a24dce6cab8fe1b7e4986a63bd7f6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/nft/BaronNFT.sol:BaronNFT": {
        "src": "contracts/nft/BaronNFT.sol:9",
        "version": {
          "withMetadata": "147763a1126f10f7563ed9d88d0b5458307544d9975bece9984cf0b38e389aeb",
          "withoutMetadata": "147763a1126f10f7563ed9d88d0b5458307544d9975bece9984cf0b38e389aeb",
          "linkedWithoutMetadata": "147763a1126f10f7563ed9d88d0b5458307544d9975bece9984cf0b38e389aeb"
        },
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/interfaces/IERC4906.sol:IERC4906",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(address,string)",
          "setBaseURI(string)",
          "freezeBaseURI()",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaronNFT",
            "src": "contracts/nft/BaronNFT.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:16"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "BaronNFT",
              "src": "contracts/nft/BaronNFT.sol:11"
            },
            {
              "label": "baseURIFrozen",
              "offset": 0,
              "slot": "9",
              "type": "t_bool",
              "contract": "BaronNFT",
              "src": "contracts/nft/BaronNFT.sol:13"
            },
            {
              "label": "_baseTokenURI",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "BaronNFT",
              "src": "contracts/nft/BaronNFT.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/refund/RefundManager.sol:RefundManager": {
        "src": "contracts/refund/RefundManager.sol:9",
        "version": {
          "withMetadata": "34f3c2bd0c3a73dd4141170ff453ace96d127d582111e43caec1b4647ab6d6f0",
          "withoutMetadata": "90aa06bc0f813ca44375388f2b5ede1de1accb016c8aaf4220b951f287b86444",
          "linkedWithoutMetadata": "90aa06bc0f813ca44375388f2b5ede1de1accb016c8aaf4220b951f287b86444"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "(address,bytes32)",
          "pause()",
          "unpause()",
          "setMerkleRoot(bytes32)",
          "isClaimed(uint256)",
          "claim(uint256,address,uint256,bytes32[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundManager",
            "src": "contracts/refund/RefundManager.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "timelock",
            "src": "contracts/refund/RefundManager.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "RefundManager",
              "src": "contracts/refund/RefundManager.sol:13"
            },
            {
              "label": "claimedBits",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "RefundManager",
              "src": "contracts/refund/RefundManager.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    },
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:50",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/Governor.sol:Governor": {
        "src": "@openzeppelin/contracts/governance/Governor.sol:28",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Governor",
            "src": "@openzeppelin/contracts/governance/Governor.sol:84"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)11987_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)11987_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "clock()",
          "CLOCK_MODE()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/TimelockController.sol:TimelockController": {
        "src": "@openzeppelin/contracts/governance/TimelockController.sol:25",
        "version": {
          "withMetadata": "37b085b136891c71ac59da18d6d5578694101e1ec5c99d0b7141c8c4b3bcd7c3",
          "withoutMetadata": "37b085b136891c71ac59da18d6d5578694101e1ec5c99d0b7141c8c4b3bcd7c3",
          "linkedWithoutMetadata": "37b085b136891c71ac59da18d6d5578694101e1ec5c99d0b7141c8c4b3bcd7c3"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[],address)",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "@openzeppelin/contracts/governance/TimelockController.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:32"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:GovernorCountingSimple": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:13",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "COUNTING_MODE()",
          "hasVoted(uint256,address)",
          "proposalVotes(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)11987_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3277_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3277_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)11987_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3277_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:GovernorSettings": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:13",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorSettings",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)11987_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)11987_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:GovernorTimelockControl": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:26",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:IGovernorTimelock",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorTimelockControl",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)11987_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(TimelockController)3255",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(TimelockController)3255": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)11987_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:14",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotes",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)11987_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)11987_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:GovernorVotesQuorumFraction": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:16",
        "inherit": [
          "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes",
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Checkpoints.sol:Checkpoints",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "quorumNumerator()",
          "quorumNumerator(uint256)",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotesQuorumFraction",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)11987_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Trace224)7190_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:22",
              "retypedFrom": "Checkpoints.History"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint224)7195_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint224[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)11987_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint224)7195_storage": {
              "label": "struct Checkpoints.Checkpoint224",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Trace224)7190_storage": {
              "label": "struct Checkpoints.Trace224",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint224)7195_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:IGovernorTimelock": {
        "src": "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:13",
        "inherit": [
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805": {
        "src": "@openzeppelin/contracts/interfaces/IERC5805.sol:9",
        "inherit": [
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "e2ee1649baba26848f211b2fc52ebfbbe4d5ba413133dcb6e2e1b711ddd165b2",
          "withoutMetadata": "93b60a5db8e5d37f1a28c7bc53deb370e3c270d0d2306398b5a65c4421da1a8a",
          "linkedWithoutMetadata": "93b60a5db8e5d37f1a28c7bc53deb370e3c270d0d2306398b5a65c4421da1a8a"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Counter)8226_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)8226_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)8226_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "clock()",
          "CLOCK_MODE()",
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Counter)8226_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5523_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(Checkpoint)5523_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)5523_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5523_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)8226_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)5523_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)8226_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "db7e8afee7d274f0f2696fed3ef1b2c5de3e9bdc76aa0e493d661ff76e8c6d59",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Checkpoints.sol:Checkpoints": {
        "src": "@openzeppelin/contracts/utils/Checkpoints.sol:19",
        "version": {
          "withMetadata": "b189cdadde17f17a02c20c125cc9fa9751b6aeef9191023fe769a468059ff81a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "bfe48f350a764b5aac09cbfe7cd2c287c4ae6e9e55b95a27f74e1eb721499f7c",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings": {
        "src": "@openzeppelin/contracts/utils/ShortStrings.sol:40",
        "version": {
          "withMetadata": "cb602a8ff35cb957dd31a01066c8e85833901719156f2f057edd8fbe1cbc9264",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "9b295404c46f124a9bda5d4d3704e26e24ebc350b9847207b3860bbdfad76e39",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "d0a914dcbd6dc1df62bc3ee61691cd3d7f6f4578f47a60aa43e48b12480af25b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "9bfecca0cc7c673396fd735881b967b4e45a70584fa4de0f2ebd61321af7ad8a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "e5aecaf1fe0f587e2e9f017d33345da8ed323bdf1543c8e65f8cf5177ee95864",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:22",
        "version": {
          "withMetadata": "9922cb2ca9508cc5c6921bb8da043c3ed8a41d35c19fe48009c0ee58e196359e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "51c3e8ceb40f4dc49d3b24dedba37e26218a24dce6cab8fe1b7e4986a63bd7f6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue": {
        "src": "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:21",
        "version": {
          "withMetadata": "25dfe52f0cad5149344f0651f320279c937e7b4ac925025e9565fdba85f205d6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/SeferVerseDAO.sol:SeferVerseDAO": {
        "src": "contracts/SeferVerseDAO.sol:6",
        "version": {
          "withMetadata": "8520579905e401516ba9c9561dc3c49d7e926bc416efd67e0dbc40cddc107371",
          "withoutMetadata": "9f51a1a9bb09339de24d021d4d041df814b3a0e6bfadb10cab3dc2cbf81d2677",
          "linkedWithoutMetadata": "9f51a1a9bb09339de24d021d4d041df814b3a0e6bfadb10cab3dc2cbf81d2677"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,address)",
          "setName(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SeferVerseDAO",
            "src": "contracts/SeferVerseDAO.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "timelock",
            "src": "contracts/SeferVerseDAO.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "SeferVerseDAO",
              "src": "contracts/SeferVerseDAO.sol:7"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/governance/SeferGovernor.sol:SeferGovernor": {
        "src": "contracts/governance/SeferGovernor.sol:14",
        "version": {
          "withMetadata": "eed99783601493d3c94238f363cba95da1c349dc017a9b84e042d8de179bfc16",
          "withoutMetadata": "eed99783601493d3c94238f363cba95da1c349dc017a9b84e042d8de179bfc16",
          "linkedWithoutMetadata": "eed99783601493d3c94238f363cba95da1c349dc017a9b84e042d8de179bfc16"
        },
        "inherit": [
          "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:GovernorTimelockControl",
          "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:GovernorVotesQuorumFraction",
          "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes",
          "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:GovernorCountingSimple",
          "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:GovernorSettings",
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:IGovernorTimelock",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "state(uint256)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SeferGovernor",
            "src": "contracts/governance/SeferGovernor.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)11987_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3277_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "11",
              "type": "t_struct(Trace224)7190_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:22",
              "retypedFrom": "Checkpoints.History"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(TimelockController)3255",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint224)7195_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint224[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(TimelockController)3255": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3277_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)11987_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint224)7195_storage": {
              "label": "struct Checkpoints.Checkpoint224",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3277_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Trace224)7190_storage": {
              "label": "struct Checkpoints.Trace224",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint224)7195_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/token/BaronTokenVotes.sol:BaronTokenVotes": {
        "src": "contracts/token/BaronTokenVotes.sol:12",
        "version": {
          "withMetadata": "a1f63cf83f3d7944f74ba7f07a074b195b0eb698e61cc5050b5a7554ab0b215f",
          "withoutMetadata": "a1f63cf83f3d7944f74ba7f07a074b195b0eb698e61cc5050b5a7554ab0b215f",
          "linkedWithoutMetadata": "a1f63cf83f3d7944f74ba7f07a074b195b0eb698e61cc5050b5a7554ab0b215f"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:ERC20Votes",
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "pause()",
          "unpause()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaronTokenVotes",
            "src": "contracts/token/BaronTokenVotes.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Counter)8226_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5523_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(Checkpoint)5523_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "13",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)5523_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5523_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)8226_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)5523_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)8226_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    },
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:50",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/Governor.sol:Governor": {
        "src": "@openzeppelin/contracts/governance/Governor.sol:28",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Governor",
            "src": "@openzeppelin/contracts/governance/Governor.sol:84"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13238_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13238_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "clock()",
          "CLOCK_MODE()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/TimelockController.sol:TimelockController": {
        "src": "@openzeppelin/contracts/governance/TimelockController.sol:25",
        "version": {
          "withMetadata": "37b085b136891c71ac59da18d6d5578694101e1ec5c99d0b7141c8c4b3bcd7c3",
          "withoutMetadata": "37b085b136891c71ac59da18d6d5578694101e1ec5c99d0b7141c8c4b3bcd7c3",
          "linkedWithoutMetadata": "37b085b136891c71ac59da18d6d5578694101e1ec5c99d0b7141c8c4b3bcd7c3"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[],address)",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "@openzeppelin/contracts/governance/TimelockController.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:32"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:GovernorCountingSimple": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:13",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "COUNTING_MODE()",
          "hasVoted(uint256,address)",
          "proposalVotes(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13238_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3277_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3277_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13238_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3277_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:GovernorSettings": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:13",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorSettings",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13238_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13238_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:GovernorTimelockControl": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:26",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:IGovernorTimelock",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorTimelockControl",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13238_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(TimelockController)3255",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(TimelockController)3255": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13238_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:14",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotes",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13238_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13238_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:GovernorVotesQuorumFraction": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:16",
        "inherit": [
          "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes",
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Checkpoints.sol:Checkpoints",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "quorumNumerator()",
          "quorumNumerator(uint256)",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotesQuorumFraction",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13238_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Trace224)8441_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:22",
              "retypedFrom": "Checkpoints.History"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint224)8446_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint224[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13238_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint224)8446_storage": {
              "label": "struct Checkpoints.Checkpoint224",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Trace224)8441_storage": {
              "label": "struct Checkpoints.Trace224",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint224)8446_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:IGovernorTimelock": {
        "src": "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:13",
        "inherit": [
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC4906.sol:IERC4906": {
        "src": "@openzeppelin/contracts/interfaces/IERC4906.sol:10",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805": {
        "src": "@openzeppelin/contracts/interfaces/IERC5805.sol:9",
        "inherit": [
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "e2ee1649baba26848f211b2fc52ebfbbe4d5ba413133dcb6e2e1b711ddd165b2",
          "withoutMetadata": "93b60a5db8e5d37f1a28c7bc53deb370e3c270d0d2306398b5a65c4421da1a8a",
          "linkedWithoutMetadata": "93b60a5db8e5d37f1a28c7bc53deb370e3c270d0d2306398b5a65c4421da1a8a"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Counter)9477_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)9477_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)9477_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "clock()",
          "CLOCK_MODE()",
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Counter)9477_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5548_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(Checkpoint)5548_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)5548_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5548_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)9477_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)5548_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)9477_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ba1f3d309de431e231fbe58a87c738ff27ed921b1d5cacc7ae7811e909f68bb2",
          "withoutMetadata": "c335b8543b0eebc7ea6a351e5debfad6770607f46ecaedc51d4a0f49351a2ae1",
          "linkedWithoutMetadata": "c335b8543b0eebc7ea6a351e5debfad6770607f46ecaedc51d4a0f49351a2ae1"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/interfaces/IERC4906.sol:IERC4906",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "db7e8afee7d274f0f2696fed3ef1b2c5de3e9bdc76aa0e493d661ff76e8c6d59",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Checkpoints.sol:Checkpoints": {
        "src": "@openzeppelin/contracts/utils/Checkpoints.sol:19",
        "version": {
          "withMetadata": "b189cdadde17f17a02c20c125cc9fa9751b6aeef9191023fe769a468059ff81a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "bfe48f350a764b5aac09cbfe7cd2c287c4ae6e9e55b95a27f74e1eb721499f7c",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings": {
        "src": "@openzeppelin/contracts/utils/ShortStrings.sol:40",
        "version": {
          "withMetadata": "cb602a8ff35cb957dd31a01066c8e85833901719156f2f057edd8fbe1cbc9264",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "9b295404c46f124a9bda5d4d3704e26e24ebc350b9847207b3860bbdfad76e39",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "d0a914dcbd6dc1df62bc3ee61691cd3d7f6f4578f47a60aa43e48b12480af25b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "9bfecca0cc7c673396fd735881b967b4e45a70584fa4de0f2ebd61321af7ad8a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "e5aecaf1fe0f587e2e9f017d33345da8ed323bdf1543c8e65f8cf5177ee95864",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:22",
        "version": {
          "withMetadata": "9922cb2ca9508cc5c6921bb8da043c3ed8a41d35c19fe48009c0ee58e196359e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "51c3e8ceb40f4dc49d3b24dedba37e26218a24dce6cab8fe1b7e4986a63bd7f6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue": {
        "src": "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:21",
        "version": {
          "withMetadata": "25dfe52f0cad5149344f0651f320279c937e7b4ac925025e9565fdba85f205d6",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/governance/SeferGovernor.sol:SeferGovernor": {
        "src": "contracts/governance/SeferGovernor.sol:14",
        "version": {
          "withMetadata": "49378da9829174477bc682ca99ba0abf956de02eeacd7d0fd7c303de6cbdcb9e",
          "withoutMetadata": "49378da9829174477bc682ca99ba0abf956de02eeacd7d0fd7c303de6cbdcb9e",
          "linkedWithoutMetadata": "49378da9829174477bc682ca99ba0abf956de02eeacd7d0fd7c303de6cbdcb9e"
        },
        "inherit": [
          "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:GovernorTimelockControl",
          "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:GovernorVotesQuorumFraction",
          "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes",
          "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:GovernorCountingSimple",
          "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:GovernorSettings",
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:IGovernorTimelock",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "state(uint256)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SeferGovernor",
            "src": "contracts/governance/SeferGovernor.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13238_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3277_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "11",
              "type": "t_struct(Trace224)8441_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:22",
              "retypedFrom": "Checkpoints.History"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(TimelockController)3255",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint224)8446_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint224[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(TimelockController)3255": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)442_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3277_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13238_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint224)8446_storage": {
              "label": "struct Checkpoints.Checkpoint224",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)442_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3277_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Trace224)8441_storage": {
              "label": "struct Checkpoints.Trace224",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint224)8446_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/governance/SeferTimelock.sol:SeferTimelock": {
        "src": "contracts/governance/SeferTimelock.sol:6",
        "version": {
          "withMetadata": "2cd64008006a58217566434d0bedbd5d7d013d02c6491c83e3265a2f412bedae",
          "withoutMetadata": "2cd64008006a58217566434d0bedbd5d7d013d02c6491c83e3265a2f412bedae",
          "linkedWithoutMetadata": "2cd64008006a58217566434d0bedbd5d7d013d02c6491c83e3265a2f412bedae"
        },
        "inherit": [
          "@openzeppelin/contracts/governance/TimelockController.sol:TimelockController",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[],address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SeferTimelock",
            "src": "contracts/governance/SeferTimelock.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:32"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/nft/BaronNFT.sol:BaronNFT": {
        "src": "contracts/nft/BaronNFT.sol:9",
        "version": {
          "withMetadata": "64732a811ecb842319fab51edaff8ea5e9b13d2936064b9acd5958ea405fdffb",
          "withoutMetadata": "64732a811ecb842319fab51edaff8ea5e9b13d2936064b9acd5958ea405fdffb",
          "linkedWithoutMetadata": "64732a811ecb842319fab51edaff8ea5e9b13d2936064b9acd5958ea405fdffb"
        },
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/interfaces/IERC4906.sol:IERC4906",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(address,string)",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaronNFT",
            "src": "contracts/nft/BaronNFT.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:16"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "BaronNFT",
              "src": "contracts/nft/BaronNFT.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/token/BaronTokenVotes.sol:BaronTokenVotes": {
        "src": "contracts/token/BaronTokenVotes.sol:12",
        "version": {
          "withMetadata": "2eaa41301d089ebffe3507ad301e61436044c3dd5144f9849e3fac9e34b75e5d",
          "withoutMetadata": "2eaa41301d089ebffe3507ad301e61436044c3dd5144f9849e3fac9e34b75e5d",
          "linkedWithoutMetadata": "2eaa41301d089ebffe3507ad301e61436044c3dd5144f9849e3fac9e34b75e5d"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:ERC20Votes",
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "pause()",
          "unpause()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaronTokenVotes",
            "src": "contracts/token/BaronTokenVotes.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Counter)9477_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5548_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_struct(Checkpoint)5548_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "13",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)5548_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)5548_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)9477_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)5548_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)9477_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    },
    {
      "contracts/MyContract.sol:MyContract": {
        "src": "contracts/MyContract.sol:4",
        "version": {
          "withMetadata": "328150f9439658608731f81e5162821fa1b0a9ec38f95315e93600b5880f2006",
          "withoutMetadata": "83ec7be975ff77b801431a17a18c4fa00975e8f9e0110517c179e5e479d1a773",
          "linkedWithoutMetadata": "83ec7be975ff77b801431a17a18c4fa00975e8f9e0110517c179e5e479d1a773"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setMessage(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "message",
            "src": "contracts/MyContract.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "message",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "MyContract",
              "src": "contracts/MyContract.sol:5"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/SeferVerse.sol:SeferVerse": {
        "src": "contracts/SeferVerse.sol:4",
        "version": {
          "withMetadata": "607612805dca5328136b55d4502b5b61b6ae424a985cd191d5b30461bec40e9b",
          "withoutMetadata": "ddd9dc987c50c69c6c3b2ef44b8146ed4db1d81cd7e159ca3780a5276b6f4598",
          "linkedWithoutMetadata": "ddd9dc987c50c69c6c3b2ef44b8146ed4db1d81cd7e159ca3780a5276b6f4598"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SeferVerse",
            "src": "contracts/SeferVerse.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "SeferVerse",
              "src": "contracts/SeferVerse.sol:5"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "SeferVerse",
              "src": "contracts/SeferVerse.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/SeferVerseDAO.sol:SeferVerseDAO": {
        "src": "contracts/SeferVerseDAO.sol:6",
        "version": {
          "withMetadata": "4d93fda472d5839934d06306978557a2e88b421bea30fd7a79bd1e22d5ac80ce",
          "withoutMetadata": "d049ed170629981a004069f96e9b1c0ef0567fa8c4a03f12a8694e9dc8331cf9",
          "linkedWithoutMetadata": "d049ed170629981a004069f96e9b1c0ef0567fa8c4a03f12a8694e9dc8331cf9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string)",
          "setName(string)",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SeferVerseDAO",
            "src": "contracts/SeferVerseDAO.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "SeferVerseDAO",
              "src": "contracts/SeferVerseDAO.sol:7"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "SeferVerseDAO",
              "src": "contracts/SeferVerseDAO.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/interfaces/IModule.sol:IModule": {
        "src": "contracts/interfaces/IModule.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "moduleId()",
          "moduleVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    }
  ]
}